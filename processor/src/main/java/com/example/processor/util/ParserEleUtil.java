package com.example.processor.util;

import com.example.processor.reflect.Reflect;
import com.squareup.javapoet.FieldSpec;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;
import javax.tools.Diagnostic;

import static com.example.processor.util.CommonUtils.getElementType;
import static com.example.processor.util.CommonUtils.getPackageName;
import static com.example.processor.util.CommonUtils.getTypeName;
import static com.squareup.javapoet.MethodSpec.methodBuilder;

/**
 * Created by hongda on 2019-09-19.
 */
public class ParserEleUtil {


    private static final String INSTANCE_METHOD = "getInstance";
    private static final String DEFAULT_INSTANCE = "instance";
    private static final String ARGS_DATA_CLASS = "ArgsData";
    private static ParserEleUtil parserEleUtil;
    final static String AND_PARSET_PATH = "com.example.dcompiler.AndParser";

    private final static String SUFFIX = "Q";

    /**
     * key = 类名，如MainActivity.class
     * value = 该类下所有的注解，如如MainActivity所有的QJump注解的变量
     */
    private Map<TypeElement, List<VariableElement>> classMap = new HashMap<>();


    private ParserEleUtil() {
    }

    public static ParserEleUtil getInstance() {
        if (parserEleUtil == null) {
            parserEleUtil = new ParserEleUtil();
        }
        return parserEleUtil;
    }

    /**
     * 解析每一个activity或fragment并生成相关代码
     *
     * @param element
     * @param isClass
     */
    public void parserEle(Element element, boolean isClass) {
        VariableElement variableElement = null;
        TypeElement typeElement;

        if (isClass) {
            typeElement = (TypeElement) element;
        } else {
            variableElement = (VariableElement) element;
            //如果此元素是顶层类型，则返回它的包。
            typeElement = (TypeElement) variableElement.getEnclosingElement();
        }

        //获取注解的类名
        String classPath = typeElement.getQualifiedName().toString();

        //根据获取的类名获取该类下所有的注解
        List<VariableElement> fields = classMap.get(typeElement);

        if (fields == null) {
            fields = new ArrayList<>();
            classMap.put(typeElement, fields);
        }

        if (!isClass) {
            fields.add(variableElement);
            DUtil.getUtil().getMessager().printMessage(Diagnostic.Kind.NOTE,
                    "classPath = " + classPath + "  " + fields.size() + "  " + variableElement.getSimpleName());
        }

    }

    public void generateCode() {
        DUtil.getUtil().getMessager().printMessage(Diagnostic.Kind.NOTE, "开始生成代码");
        Set<Map.Entry<TypeElement, List<VariableElement>>> entries = classMap.entrySet();

        Iterator<Map.Entry<TypeElement, List<VariableElement>>> iterator = entries.iterator();

        while (iterator.hasNext()) {
            Map.Entry<TypeElement, List<VariableElement>> next = iterator.next();
            TypeElement typeElement = next.getKey();
            List<VariableElement> values = next.getValue();

            DUtil.getUtil().getMessager().printMessage(Diagnostic.Kind.NOTE, "classPath = " + typeElement.getQualifiedName() + " 共有几个注解变量 = " + values.size());

            //1、构建Class
            final String packageName = getPackageName(typeElement);

            TypeSpec.Builder builder = TypeSpec
                    .classBuilder("Q" + typeElement.getSimpleName())//类名
                    .addModifiers(Modifier.PUBLIC)
                    .addJavadoc("this is generated by @QJump");

            //判断是activity还是fragment
            CommonUtils.ElementType type = getElementType(typeElement);
            if (type == CommonUtils.ElementType.ACTIVITY) {
                DUtil.log("当前类的类型 = " + type + " activity");
                //生成activity的方法
                generateAcitivityCode(true, builder, typeElement, values);
            } else if (type == CommonUtils.ElementType.FRAGMENT) {
                //生成activity的方法
                generateAcitivityCode(false, builder, typeElement, values);
                DUtil.log("当前类的类型 = " + type + "  fragment");
            }

            //2、todo 生成类里的方法
            for (VariableElement v : values) {
                DUtil.log(typeElement.getSimpleName() + " 当前类的注解变量 = " + v.getSimpleName());

            }
            //生成外部set方法
            generateSetMethod(builder, values);
            //生成内部传参类
            generateArgDataClass(builder, values);

            TypeSpec typeSpec = builder.build();

            // 与目标Class放在同一个包下，解决Class属性的可访问性
            JavaFile javaFile = JavaFile.builder(packageName, typeSpec).build();
            // 生成class文件
            try {
                javaFile.writeTo(DUtil.getUtil().getFiler());
            } catch (IOException e) {
                DUtil.error(e.getMessage());
                e.printStackTrace();
            }
        }

    }

    private void generateAcitivityCode(boolean isActivity, TypeSpec.Builder builder, TypeElement typeElement, List<VariableElement> values) {
        //生成全局属性
        addFields(builder, typeElement);
        //生成私有构造方法
        createPrivateConstructor(builder);
        //生成单例
        createSingleInstanceMethod(builder, typeElement);
        //生成注册方法
        generateInjectMethod(isActivity, builder, typeElement, values);
    }


    /**
     * 生成单例方法
     * public static QSecondActivity getInstance() {
     * if (instance == null) {
     * instance = new QSecondActivity();
     * instance.argsData = new QSecondActivity.ArgsData();
     * }
     * return instance;
     * }
     */
    private void createSingleInstanceMethod(TypeSpec.Builder typeBuilder, TypeElement typeElement) {
        MethodSpec.Builder builder = MethodSpec.methodBuilder(INSTANCE_METHOD)
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .beginControlFlow("if(instance==null)")
                .addStatement("instance = new $L()", "Q" + typeElement.getSimpleName().toString())
                .addCode("instance.argsData = new $L();", "ArgsData")
                .endControlFlow();

        TypeName typeName = Reflect.on(TypeName.class).create("Q" + typeElement.getSimpleName()).get();

        MethodSpec methodSpec = builder.addStatement("return instance")
                .returns(typeName)
                .build();

        typeBuilder.addMethod(methodSpec);
    }

    /**
     * 生成私有构造方法
     *
     * @param builder
     */
    private void createPrivateConstructor(TypeSpec.Builder builder) {
        MethodSpec.Builder methodBuilder = MethodSpec.constructorBuilder()
                .addModifiers(Modifier.PRIVATE);
        MethodSpec methodSpec = methodBuilder.build();
        builder.addMethod(methodSpec);
    }

    /**
     * 生成注册方法
     *
     * @param isActivity
     * @param builder
     * @param values
     */
    private void generateInjectMethod(boolean isActivity, TypeSpec.Builder builder, TypeElement typeElement, List<VariableElement> values) {
        MethodSpec.Builder injectBuilder = methodBuilder("inject")
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .returns(TypeName.VOID)
                .addParameter(getTypeName(typeElement.asType().toString()), "target");

        injectBuilder.beginControlFlow("if(target==null)")
                .addStatement("return")
                .endControlFlow();
        if (isActivity) {
            GenerateCodeUtil.generateActivityInjectCode(injectBuilder, values);
            GenerateCodeUtil.generateActivityStartCode(builder, typeElement);
        } else {
            GenerateCodeUtil.generateFragmentCode(injectBuilder, values);
            GenerateCodeUtil.generateFragmentBuildCode(builder, typeElement);
        }

        builder.addMethod(injectBuilder.build());

    }

    /**
     * 生成全局变量
     *
     * @param typeBuilder
     */
    private void addFields(TypeSpec.Builder typeBuilder, TypeElement typeElement) {
        //
        String clzName = typeElement.getSimpleName().toString();
        clzName = "Q" + clzName;
        typeBuilder.addField(FieldSpec.builder(getTypeName(clzName), DEFAULT_INSTANCE, Modifier.PRIVATE, Modifier.STATIC).build());

        typeBuilder.addField(FieldSpec.builder(TypeName.get(String.class), "TAG", Modifier.PRIVATE, Modifier.STATIC)
                .initializer("$L.class.getCanonicalName()", typeElement.getSimpleName()).build());

        typeBuilder.addField(FieldSpec.builder(
                getTypeName(ARGS_DATA_CLASS), "argsData", Modifier.PRIVATE, Modifier.STATIC
        ).build());

        typeBuilder.addField(FieldSpec.builder(
                TypeName.INT
                , "requestCode",
                Modifier.PRIVATE
        )
                .initializer("-1")
                .build());

        typeBuilder.build();
    }

    /**
     * 生成外部传参方法
     *
     * @param builder
     * @param variableElements
     */
    private void generateSetMethod(TypeSpec.Builder builder, List<VariableElement> variableElements) {
        for (VariableElement v : variableElements) {
            builder.addMethod(createOuterSetMethod(v));
        }
    }

    /**
     * 生成内部传参类
     *
     * @param builder
     * @param variableElements
     */
    private void generateArgDataClass(TypeSpec.Builder builder, List<VariableElement> variableElements) {
        TypeSpec.Builder innerBuilder = TypeSpec.classBuilder(ARGS_DATA_CLASS)
                .addModifiers(Modifier.PUBLIC, Modifier.STATIC)
                .addJavadoc("生成内部传参类")
                .addSuperinterface(TypeName.get(Serializable.class));

        for (VariableElement v : variableElements) {
            //构建内存传参类的属性
            innerBuilder.addField(FieldSpec.builder(
                    getTypeName(v.asType().toString())
                    , v.getSimpleName().toString(), Modifier.PRIVATE
            ).build());
            //构建内部传参类的方法
            innerBuilder.addMethod(createGetMethod(v));
            innerBuilder.addMethod(createSetMethod(v));
        }

        builder.addType(innerBuilder.build());

    }

    /**
     * 创建get方法
     *
     * @param element
     * @return
     */
    private MethodSpec createGetMethod(VariableElement element) {
        String getMethodName = StringUtils.getGetMethodName(element.getSimpleName().toString());
        return MethodSpec.methodBuilder(getMethodName)
                .addModifiers(Modifier.PUBLIC)
                .returns(getTypeName(element.asType().toString()))
                .addStatement("return this.$L", element.getSimpleName())
                .build();
    }

    /**
     * 创建set方法
     *
     * @param element
     * @return
     */
    private MethodSpec createSetMethod(VariableElement element) {
        String setMethodName = StringUtils.getSetMethodName(element.getSimpleName().toString());
        return MethodSpec.methodBuilder(setMethodName)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(getTypeName(element.asType().toString()), element.getSimpleName().toString())
                .returns(getTypeName(ARGS_DATA_CLASS))
                .addStatement("this.$L = $L", element.getSimpleName(), element.getSimpleName())
                .addStatement("return this")
                .build();
    }

    /**
     * 创建外部set方法
     *
     * @param element
     * @return
     */
    private MethodSpec createOuterSetMethod(VariableElement element) {
        String setMethodName = StringUtils.getSetMethodName(element.getSimpleName().toString());
        String className = "Q" + element.getEnclosingElement().getSimpleName();
        return methodBuilder(setMethodName)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(getTypeName(element.asType().toString()), element.getSimpleName().toString())
                .returns(getTypeName(className))
                .addStatement("this.argsData.$L = $L", element.getSimpleName(), element.getSimpleName())
                .addStatement("return this")
                .build();
    }


}
